[{"path":"/articles/fair-theory.html","id":"creating-a-fair-theory","dir":"Articles","previous_headings":"","what":"Creating a FAIR Theory","title":"Making a Theory FAIR","text":"tutorial takes user distinct steps involved making theory FAIR. uses R-package theorytools specific software platforms. open science infrastructure area active development, approach proposed considered definitive, rather, one proposal FAIR-compliant implementation theory using infrastructure available time writing. steps described tutorial largely automated function theorytools::create_fair_theory(); expert users might use function directly.","code":"library(theorytools)"},{"path":"/articles/fair-theory.html","id":"time-to-complete","dir":"Articles","previous_headings":"Creating a FAIR Theory","what":"Time to Complete","title":"Making a Theory FAIR","text":"Estimated time complete: 45-60 minutes.","code":""},{"path":"/articles/fair-theory.html","id":"learning-goals","dir":"Articles","previous_headings":"Creating a FAIR Theory","what":"Learning Goals","title":"Making a Theory FAIR","text":"Creating project folder theory Version controlling folder ‘Git’ Connecting local repository remote (‘GitHub’) repository Adding shareable theory file repository Adding LICENSE file repository (recommend CC0) Adding README file repository Adding ‘Zenodo’ metadata repository Pushing changes remote repository Turning ‘Zenodo’ archiving remote repository Publishing release theory Verifying ‘Zenodo’ mints DOI theory latest release Conceptual workflow task.","code":""},{"path":"/articles/fair-theory.html","id":"running-example-the-empirical-cycle","dir":"Articles","previous_headings":"Creating a FAIR Theory","what":"Running Example: the Empirical Cycle","title":"Making a Theory FAIR","text":"Given based argument importance FAIR theory empirical cycle, use example tutorial. empirical cycle model cumulative knowledge production scientific research, described De Groot Spiekerman (1969) (p. 28): Phase 1: ‘Observation’: collection grouping empirical materials; (tentative) formation hypotheses.Phase 2: ‘Induction’: formulation hypotheses.Phase 3: ‘Deduction’: derivation specific consequences hypotheses, form testable predictions.Phase 4: ‘Testing’: hypotheses new empirical materials, way checking whether predictions fulfilled.Phase 5: ‘Evaluation’: outcome testing procedure respect hypotheses theories stated, well view subsequent, continued related, investigations.","code":""},{"path":[]},{"path":"/articles/fair-theory.html","id":"creating-a-project-folder","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Creating a Project Folder","title":"Making a Theory FAIR","text":"spirit modular publishing, tutorial assumes ’re creating FAIR theory standalone project. possible theory implemented programming language like R, often - empirical cycle described implemented plain text. Therefore, create R project (.Rproj file et cetera), just regular nondescript project. starts creating empty project folder. want create new folder called empirical_cycle existing folder c:/theories/, can call:","code":"project_path <- file.path(\"c:/theories\", \"empirical_cycle\") dir.create(project_path)"},{"path":"/articles/fair-theory.html","id":"version-controlling-the-project-folder","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Version Controlling The Project Folder","title":"Making a Theory FAIR","text":"use ‘Git’ version control project folder. already ‘Git’ installed computer, install now. can verify ‘Git’ installed working running: function shows green checkmark, can initialize version control project repository running:","code":"worcs::check_git() #> ℹ Check if Git is available on the command line.✔ Check if Git is available on the command line. ... done #> ℹ Checking if libgit2 is properly installed, required for connecting to Git rem…✔ Checking if libgit2 is properly installed, required for connecting to Git rem… #> ℹ Initiating Git repository.✔ Initiating Git repository. ... done #> ℹ Git user is configured.✔ Git user is configured. ... done #> ℹ Adding files with `gert::git_add()`.✔ Adding files with `gert::git_add()`. ... done #> ℹ Committing with `gert::git_commit()`.✔ Committing with `gert::git_commit()`. ... done gert::git_init(path = project_path)"},{"path":"/articles/fair-theory.html","id":"connecting-to-a-remote-github-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Connecting to a Remote (‘GitHub’) Repository","title":"Making a Theory FAIR","text":"make FAIR theory accessible collaborators discoverable wider community, must connect local ‘Git’ repository remote repository platform like ‘GitHub’. proceeding, ensure ‘GitHub’ account. Academics may qualify free upgrade. authorize ‘R’ interact ‘GitHub’ account, run usethis::create_github_token(), takes website create personal access token (PAT). Copy , run gitcreds::gitcreds_set() paste PAT asked. still experience problems try usethis::gh_token_help() help. check ready proceed, run: see green checkmark, can create new repository ‘GitHub’ directly ‘R’: command create new public repository ‘GitHub’ link local repository. private = FALSE argument ensures repository public default. Alternatively, may already created remote repository ‘GitHub’ website. Either way, assuming name repository empirical_cycle, can connect project folder follows:","code":"worcs::check_github() #> ℹ Active project has a remote repository that requires PAT authentication. #> ℹ Check for PAT.✔ Check for PAT. ... done worcs::git_remote_create(\"empirical_cycle\", private = FALSE) worcs::git_remote_connect(project_path, remote_repo = \"empirical_cycle\")"},{"path":"/articles/fair-theory.html","id":"adding-a-shareable-theory-file-to-the-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Adding a Shareable Theory File to the Repository","title":"Making a Theory FAIR","text":"theory represented digital artifact, structured plain-text document machine-readable file (e.g., ‘DOT’, ‘JSON’, ‘YAML’, ‘R’ code). point, offer two alternatives.","code":""},{"path":"/articles/fair-theory.html","id":"creating-a-plain-text-theory","dir":"Articles","previous_headings":"Completing All Steps Manually > Adding a Shareable Theory File to the Repository","what":"Creating a Plain-Text Theory","title":"Making a Theory FAIR","text":"simply copy De Groot’s implementation empirical cycle plain text file, like :","code":"writeLines(   c(\"*Phase 1:* 'Observation': collection and grouping of empirical materials;     (tentative) formation of hypotheses.\",     \"*Phase 2:* 'Induction': formulation of hypotheses.\",      \"*Phase 3:* 'Deduction': derivation of specific consequences     from the hypotheses, in the form of testable predictions.\",     \"*Phase 4:* 'Testing': of the hypotheses against new empirical materials,     by way of checking whether or not the predictions are fulfilled.\",     \"*Phase 5:* 'Evaluation': of the outcome of the testing procedure     with respect to the hypotheses or theories stated, as well as     with a view to subsequent, continued or related, investigations.\" ), file.path(project_path, \"theory.txt\"))"},{"path":"/articles/fair-theory.html","id":"further-formalizing-the-empirical-cycle","dir":"Articles","previous_headings":"Completing All Steps Manually > Adding a Shareable Theory File to the Repository","what":"Further Formalizing the Empirical Cycle","title":"Making a Theory FAIR","text":"compare levels theory formalization (Guest Martin 2021), De Groot’s theory either “theory” “specification” level. consists series natural language statements. can increase level formalization, present “implementation” human- machine-readable DOT language: language describes model directed graph. Note code organized first half describes ontology entities theory postulates, second half describes proposed interrelations. follows first two properties good theory according Meehl (Meehl 1990). can now write implementation empirical cycle text file, say empirical_cycle.dot.","code":"theory <-  \"digraph {    observation;   induction;   deduction;   test;   evaluation;      observation -> induction;   induction -> deduction;   deduction -> test;   test -> evaluation;   evaluation -> observation;    }\" cat(theory, file = file.path(project_path, \"empirical_cycle.dot\"), sep = \"\\n\")"},{"path":"/articles/fair-theory.html","id":"adding-a-license-file-to-the-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Adding a LICENSE File to the Repository","title":"Making a Theory FAIR","text":"license ensures others know can legally reuse work. FAIR theory, recommend using CC0 (Creative Commons Zero) license, places work public domain. Add license file repository:","code":"worcs::add_license_file(path = project_path, license = \"cc0\") #> ℹ Writing license file #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found #> ✔ Writing license file ... done"},{"path":"/articles/fair-theory.html","id":"adding-a-readme-file-to-the-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Adding a README File to the Repository","title":"Making a Theory FAIR","text":"README file describes repository’s contents purpose, making easier others understand reuse theory. theorytools package contains function generate README file appropriate sections FAIR theory, can used like : encourage users edit resulting README.md file, particular, add relevant information X-interoperability.","code":"theorytools::add_readme_fair_theory(title = \"The Empirical Cycle\",                                     path = project_path) #> ℹ Creating README.md✔ Creating README.md ... done"},{"path":"/articles/fair-theory.html","id":"adding-zenodo-metadata-to-the-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Adding ‘Zenodo’ Metadata to the Repository","title":"Making a Theory FAIR","text":"‘Zenodo’ uses metadata files archive index repositories. Create .zenodo.json file metadata theory indexed appropriately:","code":"add_zenodo_json_theory(   path = project_path,   title = \"The Empirical Cycle\",   keywords = c(\"philosophy of science\", \"methodology\") ) #> ℹ Add 'Zenodo' metadata✔ Add 'Zenodo' metadata ... done"},{"path":"/articles/fair-theory.html","id":"pushing-these-changes-to-the-remote-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Pushing These Changes to the Remote Repository","title":"Making a Theory FAIR","text":"Version control requires adding files tracked repository (gert::git_add()), committing changes files (gert::git_commit()), pushing remote repository (gert::git_push()). worcs function worcs::git_update() combines three actions, acting like kind “quick-save” function:","code":"worcs::git_update(\"First commit of my theory\", repo = project_path) #> ℹ Identify local 'Git' repository at \"C:\\\\Users\\\\vanlissa\\\\AppData\\\\Local\\\\Temp…✔ Identify local 'Git' repository at \"C:\\\\Users\\\\vanlissa\\\\AppData\\\\Local\\\\Temp… #> ℹ Adding files to staging area of 'Git' repository.✔ Adding files to staging area of 'Git' repository. ... done #> ℹ Committed staged files to 'Git' repository.✔ Committed staged files to 'Git' repository. ... done #> ℹ Push local commits to remote repository.✖ Push local commits to remote repository. ... failed"},{"path":"/articles/fair-theory.html","id":"check-your-github-repository","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Check Your ‘GitHub’ Repository","title":"Making a Theory FAIR","text":"Navigate repository ‘GitHub’ check committed files, including theory file, license, README, ‘Zenodo’ metadata, now visible remote repository (green box image ). Front Page ‘GitHub’ Repository Furthermore, repository visibility must set “Public” ensure ‘Zenodo’ can discover archive . created repository programmatically shown , already public (see red box image ). necessary, change visibility setting Public clicking “Settings” > “General” > “Change repository visibility.”","code":""},{"path":"/articles/fair-theory.html","id":"login-to-zenodo","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Login to ‘Zenodo’","title":"Making a Theory FAIR","text":"Head zenodo.org. ‘Zenodo’ platform can permanently archive code project elements. ‘Zenodo’ assigning projects Digital Object Identifier (DOI), also helps make work citable. different ‘GitHub’, acts place actual work project takes place, rather long-term archiving . ‘GitHub’, content can modified, deleted, rewritten, irreversibly changed, makes bit concerning used longer lasting referencing purposes. ‘Zenodo’ offers security permanence research outputs. Sign ‘Zenodo’ already ‘Zenodo’ account, easy. , follow steps create one — can login using ‘GitHub’ account.","code":""},{"path":"/articles/fair-theory.html","id":"authorize-github-to-connect-with-zenodo","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Authorize ‘GitHub’ to connect with ‘Zenodo’","title":"Making a Theory FAIR","text":"‘Zenodo’ website authorize connect ‘GitHub’ account ‘Using ’GitHub’’ section. , ‘Zenodo’ redirect ‘GitHub’ ask permissions use ‘webhooks’ repositories. want authorize ‘Zenodo’ permissions needs form links. Authorize connect ‘GitHub’","code":""},{"path":"/articles/fair-theory.html","id":"select-the-repository-to-archive","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Select the Repository to Archive","title":"Making a Theory FAIR","text":"got far, means ‘Zenodo’ now authorized configure repository webhooks needs archive repository issue DOI. , ‘Zenodo’ website navigate ‘GitHub’ repository listing page simply “flip switch” next repository. repository show list, may need press ‘Syncronize now’ button. time writing, noticed can take quite (hours?) ‘Zenodo’ detect new ‘GitHub’ repositories. , take break come back last step tomorrow! Enable individual ‘GitHub’ repositories archived ‘Zenodo’","code":""},{"path":"/articles/fair-theory.html","id":"optional-check-repository-settings","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Optional: Check repository settings","title":"Making a Theory FAIR","text":"successful, now set new webhook ‘Zenodo’ repository. Optionally, can verify . ‘GitHub’, click settings repository, Webhooks tab left hand side menu. display new ‘Zenodo’ webhook configured ‘Zenodo’. Note, may take little time webhook listing show . Check webhooks enabled ‘GitHub’ repository.","code":""},{"path":"/articles/fair-theory.html","id":"create-a-new-release","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Create a New Release","title":"Making a Theory FAIR","text":"archive repository ‘Zenodo’, must create new release. can using following code: previously published releases, function assume want use semantic versioning release tag release title. means first release labeled version number “0.1.0”. subsequent release automatically increment trailing digit, .e.: “0.1.1”, “0.1.2”. make major change theory, may want manually increment middle digit like :","code":"worcs::git_release_publish(repo = project_path) worcs::git_release_publish(repo = project_path,                            tag_name = \"0.2.0\",                            release_name = \"0.2.0\")"},{"path":"/articles/fair-theory.html","id":"verify-on-zenodo","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Verify on ‘Zenodo’","title":"Making a Theory FAIR","text":"verify release archived ‘Zenodo’ assigned DOI, need visit Uploads tab. Check new release uploaded.","code":""},{"path":"/articles/fair-theory.html","id":"entering-meta-data","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Entering Meta-Data","title":"Making a Theory FAIR","text":"can document ‘Zenodo’ archive FAIR theory adding extra information ‘Zenodo’. ‘Zenodo’ click Upload tab main menu, find newly uploaded repository. Click orange Edit button. Click orange Edit button, verify/supply following information: Resource type: set Model Title: prefaced FAIR theory: Keywords subjects: first keyword fairtheory documented theory paper wrote, introduce FAIR theory derived existing theory, published print (paper, book chapter) made FAIR save changes, click ‘Publish’.","code":""},{"path":"/articles/fair-theory.html","id":"verifying-that-zenodo-mints-a-doi-for-your-theory","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Verifying That ‘Zenodo’ Mints a DOI for Your Theory","title":"Making a Theory FAIR","text":"publishing release, ‘Zenodo’ archive repository mint DOI. Verify checking ‘Zenodo’ entry repository, DOI displayed. Include DOI citations references theory enhance discoverability reusability. ‘GitHub’/‘Zenodo’ integration assign one “mother-DOI” project, well unique DOI version/release FAIR theory. enables users refer cite specific versions theory. list authors citation automatically determined ‘GitHub’ user account names used repository - can edited ‘Zenodo’, explained . DOIs used ‘Zenodo’ registered DataCite service. Pro-tip: Check Citation field ‘Zenodo’ page, copy-paste README file ‘GitHub’ repo make cross-linking even easier (refer users ‘Zenodo’ page find citation, obviates need manually update information). Click DOI badge Details field get instructions add clear highlighted DOI badge ‘GitHub’ repository, users see make use DOI:","code":""},{"path":"/articles/fair-theory.html","id":"congratulations","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"CONGRATULATIONS!","title":"Making a Theory FAIR","text":"FAIR theory now archived ‘Zenodo’, DOI can versioned reflect updates repository version time. able see details ‘GitHub’ ‘Zenodo’ page repository. also means archived projects can get picked indexing services search engines use DOIs . Providing long-term archive DOI work required others able properly cite , provides basic citation metadata. Open Science, important able comprehensively cite resources use research, including theory, workflow enables happen, line best practices. Making theory FAIR also helps elevate standard theory standard research outputs, like papers software. Pro-tip: research funded EU grant? Now can directly connect FAIR theory grant updating grant section metadata project’s ‘Zenodo’ record. massively helps increase discoverability!","code":""},{"path":"/articles/fair-theory.html","id":"checklist-for-citing-your-project","dir":"Articles","previous_headings":"Completing All Steps Manually","what":"Checklist for citing your project","title":"Making a Theory FAIR","text":"now sustainably archived ‘GitHub’ repository ‘Zenodo’ ready re-used cited! continuing, make sure : Linked ‘GitHub’ project ‘Zenodo’. see complete copy ‘GitHub’ repository ‘Zenodo’ things working. ‘Zenodo’ ‘GitHub’ integrated setup works nicely. example author names, correct project title come across ‘Zenodo’. , authors just nicknames can edit details ‘Zenodo’. Project first release, DOI. DOI displayed projects ‘Zenodo’ page. first DOI called ‘concept DOI’ master DOI linking subsequent release DOIs. Copy DOI link embed ‘GitHub’ projects README page. ’re done!","code":""},{"path":"/articles/fair-theory.html","id":"optional-everything-in-one-step","dir":"Articles","previous_headings":"","what":"Optional: Everything in One Step","title":"Making a Theory FAIR","text":"function theorytools::create_fair_theory() automates preceding steps, step 2.8. Assuming already created shareable theory file called theory.txt resides currently active directory (getwd()), can create FAIR theory follows: still complete steps 2.12 - 2.17 manually.","code":"create_fair_theory(   path = file.path(\"c:/theories\", \"empirical_cycle\"),   title = \"The Empirical Cycle, Again\",   theory_file = \"theory.txt\",   remote_repo = \"empirical_cycle2\",   add_license = \"cc0\")"},{"path":"/articles/fair-theory.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Making a Theory FAIR","text":"tutorial partly adapted Module 5, Task 2 Tennant et al. (2018).","code":""},{"path":"/articles/readme.html","id":"title","dir":"Articles","previous_headings":"","what":"1. Title","title":"What to Include in a README?","text":"Provide clear title theory. recommend prefacing title words FAIR theory:, just like systematic review words systematic review title, help sentient readers immediately identify .","code":""},{"path":"/articles/readme.html","id":"description","dir":"Articles","previous_headings":"","what":"2. Description","title":"What to Include in a README?","text":"Provide plain-text description theory scope. one- two-sentence summary theory explains predicts, context field study theory applies.","code":""},{"path":"/articles/readme.html","id":"interoperability","dir":"Articles","previous_headings":"","what":"3. Interoperability","title":"What to Include in a README?","text":"README files contain section labeled “Getting Started”, “Instructions Use”, “Use”. FAIR perspective, section might better labeled “Interoperability”. propose using section explicitly address theory’s X-interoperability, telling users exactly can use theory , . X-interoperability: Tells can theory, .","code":""},{"path":"/articles/readme.html","id":"contributing","dir":"Articles","previous_headings":"","what":"4. Contributing","title":"What to Include in a README?","text":"Pertaining Reusability criterion FAIR principles, section tell users social expectations regarding reuse contributions.","code":""},{"path":"/articles/readme.html","id":"license","dir":"Articles","previous_headings":"","what":"5. License","title":"What to Include in a README?","text":"legal complement preceding Contributing section, section refer readers LICENSE file learn legal conditions reuse.","code":""},{"path":"/articles/readme.html","id":"citing-this-work","dir":"Articles","previous_headings":"","what":"6. Citing this Work","title":"What to Include in a README?","text":"Tell users cite theory. Note section redundant Zenodo archive, preferred citation field. disadvantage redundant information may maintain section README going forward. advantage documenting related works README makes readily accessible users. suggest compromise: retain section, use direct reader preferred citation Zenodo page.","code":""},{"path":"/articles/readme.html","id":"related-works","dir":"Articles","previous_headings":"","what":"7. Related Works","title":"What to Include in a README?","text":"section refer work FAIR theory derived , documented . , redundant metadata entered Zenodo. nevertheless recommend using section direct reader Zenodo, optionally, document one canonical reference theory unlikely change going forward.","code":""},{"path":"/articles/readme.html","id":"example-the-empirical-cycle","dir":"Articles","previous_headings":"","what":"Example: The Empirical Cycle","title":"What to Include in a README?","text":", break README file implementation De Groot’s empirical cycle FAIR theor: title prefaced FAIR theory: description gives information theory scope: Interoperability section tells readers theory implemented, ways can reused: specific instructions contribute project: Related Works section gives one canonical reference, directs readers Zenodo: preferred citation section directs readers Zenodo prevent redundancy: including sections, README file serve robust guide understanding, using, extending FAIR theory, ensuring accessibility reusability diverse audiences.","code":"# FAIR theory: The Empirical Cycle ## Description  This is a FAIR implementation of De Groot and Spiekerman's \"empirical cycle\" theory, a theory of cumulative knowledge acquisition through scientific research. ## Interoperability  The theory is implemented in the DOT language for describing graphs.  ### Rendering the theory using graphviz  See the graphviz manual for more information: https://graphviz.org ## Contributing  If you want to contribute to this project, please get involved. You can do so in three ways:  1. **To discuss the current implementation and discuss potential changes**, file a ‘GitHub’ issue [here](https://github.com/cjvanlissa/empirical_cycle/issues) 2. **To directly propose changes**, send a pull request containing the proposed changes [here](https://github.com/cjvanlissa/tidySEM/pulls) 3. **To create a derivative theory**, please fork the repository [here](https://github.com/cjvanlissa/empirical_cycle/fork). Please cite this repository (see below), and add this repository as a related work (below and by adding the appropriate metadata on Zenodo).  By participating in this project, you agree to abide by the [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html). ## Related Works  See this project's Zenodo page for cross-references to related work.   This repository contains an implementation of the \"empirical cycle\", a model proposed by De Groot and Spiekerman (1969, p. 28)  > De Groot, A. D., & Spiekerman, J. A. A. (1969). Methodology: Foundations of inference and research in the behavioral sciences. De Gruyter Mouton. https://doi.org/10.1515/9783112313121 ## Citing this work  See [this project's Zenodo page](https://doi.org/10.5281/zenodo.14552329) for the preferred citation."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Caspar J. Van Lissa. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Van Lissa CJ (2025). theorytools: FAIR Theory Construction. R package version 0.1.0, https://github.com/cjvanlissa/theorytools.","code":"@Manual{,   title = {theorytools: FAIR Theory Construction},   author = {Caspar J. {Van Lissa}},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/cjvanlissa/theorytools}, }"},{"path":"/index.html","id":"theorytools","dir":"","previous_headings":"","what":"FAIR Theory Construction","title":"FAIR Theory Construction","text":"theorytools package offers integrated suite tools creating, maintaining, reusing FAIR (Findable, Accessible, Interoperable, Reusable) theories R. Designed support transparent collaborative theory development, package enables users formalize theories, track changes version control, assess pre-empirical coherence, derive testable hypotheses. Aligning open science principles workflows, theorytools facilitates systematic improvement theoretical frameworks enhances discoverability usability.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"FAIR Theory Construction","text":"can install development version theorytools GitHub :","code":"# install.packages(\"pak\") pak::pak(\"cjvanlissa/theorytools\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"FAIR Theory Construction","text":"View package website . Every user-facing function package documented, documentation can accessed running ?function_name R console, e.g., ?create_fair_theory. Moreover, can check package vignettes running vignette(package = \"theorytools\"), read specific vignettes running, e.g., vignette(\"fairtheory\", package = \"theorytools\").","code":""},{"path":"/index.html","id":"citing-theorytools","dir":"","previous_headings":"","what":"Citing theorytools","title":"FAIR Theory Construction","text":"can cite R-package following citation: Van Lissa, C. J. (2024). FAIR Theory Construction Toolkit (0.1.0) [R package]. https://github.com/cjvanlissa/theorytools","code":""},{"path":"/index.html","id":"contributing-and-contact-information","dir":"","previous_headings":"","what":"Contributing and Contact Information","title":"FAIR Theory Construction","text":"ideas, please get involved. can contribute opening issue GitHub, sending pull request proposed features. Contributions code must adhere tidyverse style guide. File GitHub issue Make pull request participating project, agree abide Contributor Code Conduct v2.0.","code":""},{"path":"/reference/add_readme_fair_theory.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Readme File — add_readme_fair_theory","title":"Add Readme File — add_readme_fair_theory","text":"Writes README file specific path.","code":""},{"path":"/reference/add_readme_fair_theory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Readme File — add_readme_fair_theory","text":"","code":"add_readme_fair_theory(path, title, ...)"},{"path":"/reference/add_readme_fair_theory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Readme File — add_readme_fair_theory","text":"path Character, indicating directory create FAIR theory. title Character, indicating theory title. Default: NULL ... Additional arguments passed functions.","code":""},{"path":"/reference/add_readme_fair_theory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Readme File — add_readme_fair_theory","text":"Invisibly returns logical value, indicating whether function successful .","code":""},{"path":"/reference/add_readme_fair_theory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Readme File — add_readme_fair_theory","text":"","code":"add_readme_fair_theory(path = tempdir(), title = \"My Theory\") #> ℹ Creating README.md #> ✔ Creating README.md ... done #>"},{"path":"/reference/add_theory_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Theory File — add_theory_file","title":"Add Theory File — add_theory_file","text":"Writes theory file specific path.","code":""},{"path":"/reference/add_theory_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Theory File — add_theory_file","text":"","code":"add_theory_file(path, theory_file = \"theory.txt\")"},{"path":"/reference/add_theory_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Theory File — add_theory_file","text":"path Character, indicating directory create FAIR theory. theory_file Character, referring existing theory file copied, new theory file created. Default NULL nothing.","code":""},{"path":"/reference/add_theory_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Theory File — add_theory_file","text":"Invisibly returns logical value, indicating whether function successful .","code":""},{"path":"/reference/add_theory_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Theory File — add_theory_file","text":"","code":"add_theory_file(path = tempdir(), theory_file = \"theory.txt\") #> ℹ Creating new theory file \"theory.txt\" #> ✔ Creating new theory file \"theory.txt\" ... done #>"},{"path":"/reference/add_zenodo_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Add 'Zenodo' JSON File — add_zenodo_json","title":"Add 'Zenodo' JSON File — add_zenodo_json","text":"Writes '.zenodo.json' file specified path. Writes README file specific path.","code":""},{"path":"/reference/add_zenodo_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add 'Zenodo' JSON File — add_zenodo_json","text":"","code":"add_zenodo_json(path, title, upload_type, keywords)  add_zenodo_json_theory(path, title, keywords)"},{"path":"/reference/add_zenodo_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add 'Zenodo' JSON File — add_zenodo_json","text":"path Character, indicating directory create FAIR theory. title Character, indicating theory title. Default: NULL upload_type Character, indicating upload type. keywords Character vector keywords.","code":""},{"path":"/reference/add_zenodo_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add 'Zenodo' JSON File — add_zenodo_json","text":"Invisibly returns logical value, indicating whether function successful .","code":""},{"path":[]},{"path":"/reference/add_zenodo_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add 'Zenodo' JSON File — add_zenodo_json","text":"","code":"add_zenodo_json(path = tempdir(), title = \"Theory Title\",                 upload_type = \"software\", keywords = \"R\") add_zenodo_json_theory(path = tempdir(), title = \"My Theory\",                        keywords = \"secondkeyword\") #> ℹ Add 'Zenodo' metadata #> ✔ Add 'Zenodo' metadata ... done #>  add_zenodo_json_theory(path = tempdir(), title = \"My Theory\",                        keywords = c(\"secondkeyword\", \"thirdkeyword\")) #> ℹ Add 'Zenodo' metadata #> ✔ Add 'Zenodo' metadata ... done #>"},{"path":"/reference/create_fair_theory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create FAIR Theory Repository — create_fair_theory","title":"Create FAIR Theory Repository — create_fair_theory","text":"Partly automates process creating FAIR theory repository, see Details.","code":""},{"path":"/reference/create_fair_theory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create FAIR Theory Repository — create_fair_theory","text":"","code":"create_fair_theory(   path,   title = NULL,   theory_file = NULL,   remote_repo = NULL,   add_license = \"cc0\",   ... )"},{"path":"/reference/create_fair_theory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create FAIR Theory Repository — create_fair_theory","text":"path Character, indicating directory create FAIR theory. title Character, indicating theory title. Default: NULL theory_file Character, referring existing theory file copied, new theory file created. Default NULL nothing. remote_repo Name 'GitHub' repository exists created current authenticated user's account, see gh_whoami, Default: NULL add_license PARAM_DESCRIPTION, Default: 'cc0' ... Additional arguments passed functions.","code":""},{"path":"/reference/create_fair_theory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create FAIR Theory Repository — create_fair_theory","text":"Invisibly returns logical value, indicating whether function successful .","code":""},{"path":"/reference/create_fair_theory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create FAIR Theory Repository — create_fair_theory","text":"following steps executed sequentially: Create project folder path Initialize local 'Git' repository path remote_repo refers user's existing 'GitHub' repository, add remote local 'Git' repository. Otherwise, create new 'GitHub' repository name add remote. Add theory file. theory_file refers existing file, copy path. theory_file refers new file, create path. Add license named add_license Add README.md file Add 'Zenodo' metadata recognizes repository FAIR theory possible push remote repository, use git_update push repository 'GitHub'","code":""},{"path":[]},{"path":"/reference/create_fair_theory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create FAIR Theory Repository — create_fair_theory","text":"","code":"# Create a theory with no remote repository (for safe testing) theory_dir <- file.path(tempdir(), \"theory\") create_fair_theory(path = theory_dir,                    title = \"This is My Theory\",                    theory_file = \"theory.txt\",                    remote_repo = NULL,                    add_license = \"cc0\") #> ℹ Create project folder #> ✔ Create project folder ... done #>  #> ℹ Initialize 'Git' repository #> ✔ Initialize 'Git' repository ... done #>  #> ℹ Creating new theory file \"theory.txt\" #> ✔ Creating new theory file \"theory.txt\" ... done #>  #> ℹ Writing license file #> ✔ Writing license file ... done #>  #> ℹ Creating README.md #> ✔ Creating README.md ... done #>   # Create a theory with a remote repository if (FALSE) { # \\dontrun{ theory_dir <- file.path(tempdir(), \"theory_github\") out <- create_fair_theory(path = theory_dir,                           title = \"This is My GitHub Theory\",                           theory_file = \"theory.txt\",                           remote_repo = \"delete_test\",                           add_license = \"ccby\") } # }"},{"path":"/news/index.html","id":"theorytools-010","dir":"Changelog","previous_headings":"","what":"theorytools 0.1.0","title":"theorytools 0.1.0","text":"CRAN release: 2025-01-14 Initial CRAN submission.","code":""}]
